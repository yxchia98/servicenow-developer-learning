# set up as `.gitlab-ci.yml` file in the root of your application repo directory.

# https://docs.gitlab.com/ee/ci/yaml/README.html#workflowrules-templates
# Only runs if a merge request or the master branch

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - build:applychanges
  # - build:publishapp
  # - test:installapp
  - test:runtest
  - test:rollbackapp
  # - deploy:installapp

variables:
  TESTSTATE: "not run"
  SN_AUTH_DEV: $(K8S_SECRET_SN_AUTH_DEV)
  SN_AUTH_TEST: $(K8S_SECRET_SN_AUTH_TEST)
  SN_AUTH_PROD: $(K8S_SECRET_SN_AUTH_PROD)
  DOTENV_FILE: "$CI_PROJECT_DIR/build.env"
  DEV_ENV: "dev64904.service-now.com"
  TEST_ENV: "dev96969.service-now.com"
  PROD_ENV: "dev113245.service-now.com"
  SYSID: "f98534d91b8a1110acf48559cc4bcb55"
  TESTSUITEID: "1bdb9dd197ca111092df50081153af5a"

image: servicenowdevx/sncicd-gitlab-docker:latest

ApplyRemoteChanges:
  stage: build:applychanges
  variables:
    task: SCApply
    NOWINSTANCE: $DEV_ENV
    NOWAUTH: $SN_AUTH_DEV
    APP_SYS_ID: $SYSID
  script:
    - export
    - task.sh
  except:
    - master

# AppPublish:
#   stage: build:publishapp
#   variables:
#     task: AppPublish
#     NOWINSTANCE: $DEV_ENV
#     NOWAUTH: $SN_AUTH_DEV
#     SYS_ID: $SYSID
#     # autodetect|detect|exact|template
#     # autodetect - detect app version via REST call. Table depends on IS_APP_CUSTOMIZATION param.
#     # detect     - detect app version via file(sys_app_<id>.xml|sys_app_customization_<id>.xml).
#     #              Filename depends on IS_APP_CUSTOMIZATION param.
#     # template   - in x.y.z format you should define x.y part, z would be autogenerated based on build num.
#     # exact      - define exact version of app(e.g. 1.2.3).
#     VERSIONFORMAT: "autodetect"
#     DEVNOTES: "Updated version"
#     # If true, requires SYS_ID instead of SCOPE. true|false
#     IS_APP_CUSTOMIZATION: "true"
#   artifacts:
#     reports:
#       dotenv: $DOTENV_FILE
#   script:
#     - task.sh
#   except:
#     - master

# AppInstall:
#   stage: test:installapp
#   variables:
#     task: AppInstall
#     NOWINSTANCE: $TEST_ENV
#     NOWAUTH: $SN_AUTH_TEST
#     SYS_ID: $SYSID
#     VERSION: $PUBLISHVERSION
#     # Only applicable if Application Customization is active.
#     # Version of the base application on which to apply the customizations(Optional)
#     BASE_APP_VERSION: "1.2.3"
#     # Only applicable if Application Customization is active and the associated application
#     # is a higher version than the currently installed version(Optional, Default: false)
#     AUTO_UPGRADE_BASE_APP: "false"
#   artifacts:
#     reports:
#       dotenv: $DOTENV_FILE
#   script:
#     - task.sh
#   except:
#     - master

RunTest:
  stage: test:runtest
  variables:
    task: TestRun
    NOWINSTANCE: $TEST_ENV
    NOWAUTH: $SN_AUTH_TEST
    TEST_SUITE_SYS_ID: $TESTSUITEID
  artifacts:
    reports:
      dotenv: $DOTENV_FILE
  script:
    - echo 'TESTSTATE=started' >> $DOTENV_FILE
    - task.sh
  except:
    - master

AppRollback:
  stage: test:rollbackapp
  variables:
    task: AppRollback
    NOWINSTANCE: $TEST_ENV
    NOWAUTH: $SN_AUTH_TEST
    SYS_ID: $SYSID
    ROLLBACKVERSION: $(rollbackVersion)
  script:
    - echo $TESTSTATE
    - echo $rollbackVersion
    - '[[ "$TESTSTATE" == "started" ]] && task.sh; echo Done'
  when: on_failure
  except:
    - master
# DeployToProd:
#   stage: deploy:installapp
#   variables:
#     task: AppInstall
#     NOWINSTANCE: $PROD_ENV
#     NOWAUTH: $SN_AUTH_PROD
#     SYS_ID: $SYSID
#     VERSION: $PUBLISHVERSION
#   script:
#     - task.sh
#   only:
#     - master
